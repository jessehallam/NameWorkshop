// Generated by IcedCoffeeScript 108.0.11
(function() {
  var app;

  app = angular.module('NameWorkshop', ['Panels', 'TreeView']);

  app.service('parser', function() {
    this.lexer = window.Parser_v3.Lexer;
    this.parser = window.Parser_v3.Parser;
  });

  app.factory('generator', function(parser) {
    var stripRepeatingChars;
    stripRepeatingChars = function(s, c) {
      var ch, count, i, last, r, _i, _len;
      last = '\0';
      count = 0;
      r = [];
      for (i = _i = 0, _len = s.length; _i < _len; i = ++_i) {
        ch = s[i];
        if (ch.toLowerCase() !== last.toLowerCase()) {
          last = ch;
          count = 0;
        }
        count++;
        if (count <= c) {
          r.push(ch);
        }
      }
      return r.join('');
    };
    return function(input, options) {
      var lex, par, program;
      if (input && options.ignoreWhitespace) {
        input = input.replace(/\s|\r|\n/, function() {
          return '';
        });
      }
      lex = new parser.lexer(input);
      par = new parser.parser(lex.readTokens());
      program = par.program();
      if (!program) {
        throw new Error('parser error');
      }
      return function() {
        var val;
        val = program["eval"]();
        if (val && options.capitalize) {
          val = val[0].toUpperCase() + val.substr(1);
        }
        if (val && options.maxRepeatingChars) {
          val = stripRepeatingChars(val, options.maxRepeatingChars);
        }
        return val;
      };
    };
  });

  app.controller('Main', function(generator, parser, $rootScope, $scope) {
    $rootScope.user = {
      authenticated: true,
      name: 'User Name'
    };
    $scope.signin = function() {
      return $rootScope.user = {
        authenticated: true,
        name: 'User Name'
      };
    };
    $scope.model = {
      editor: {
        capitalize: true,
        ignoreWhitespace: false,
        maxRepeatingChars: 2,
        text: ''
      },
      fileSystem: {
        baseDir: {
          folders: [
            {
              name: 'Project 1',
              folders: [
                {
                  name: 'Project 2',
                  files: [
                    {
                      name: 'File 2.1'
                    }
                  ]
                }
              ],
              files: [
                {
                  name: 'File 1.1'
                }
              ]
            }
          ],
          files: [
            {
              name: 'File 0.1'
            }
          ]
        }
      },
      results: {
        items: [],
        savedItems: []
      }
    };
    $scope.$watch('model.editor.maxRepeatingChars', function(newValue) {
      if (newValue > 999) {
        $scope.model.editor.maxRepeatingChars = 999;
      }
      if (newValue < 0 || typeof newValue === 'undefined') {
        return $scope.model.editor.maxRepeatingChars = 0;
      }
    });
    $scope.execute = function() {
      var g, n, _i, _results;
      g = generator($scope.model.editor.text, {
        capitalize: $scope.model.editor.capitalize,
        ignoreWhitespace: $scope.model.editor.ignoreWhitespace,
        maxRepeatingChars: $scope.model.editor.maxRepeatingChars
      });
      $scope.model.results.items = [];
      _results = [];
      for (n = _i = 0; _i <= 100; n = ++_i) {
        _results.push($scope.model.results.items.push(g()));
      }
      return _results;
    };
    $scope.removeSavedItem = function(index) {
      return $scope.model.results.savedItems.splice(index, 1);
    };
    return $scope.saveItem = function(value) {
      return $scope.model.results.savedItems.push(value);
    };
  });

  app.directive('focusWhen', function($timeout) {
    return {
      restrict: 'A',
      link: function(scope, element, attrib) {
        var focus;
        focus = function() {
          return $(element).focus();
        };
        return scope.$watch(attrib.focusWhen, function(newValue) {
          if (newValue) {
            return $timeout(focus, 50);
          }
        });
      }
    };
  });

  app.directive('selectAllWhen', function($timeout) {
    return {
      restrict: 'A',
      link: function(scope, element, attrib) {
        var selectAll;
        selectAll = function() {
          return element[0].setSelectionRange(0, element[0].value.length);
        };
        return scope.$watch(attrib.selectAllWhen, function(newValue) {
          if (newValue) {
            return $timeout(selectAll, 50);
          }
        });
      }
    };
  });

  app.directive('whenFocusLost', function($parse) {
    return {
      restrict: 'A',
      link: function(scope, element, attrib) {
        var getter;
        getter = $parse(attrib.whenFocusLost);
        return $(element).on('blur', function() {
          getter(scope);
          return scope.$apply();
        });
      }
    };
  });

}).call(this);
